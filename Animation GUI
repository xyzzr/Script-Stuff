local httpService = game:GetService('HttpService')
local categories = game:HttpGet('https://catalog.roblox.com/v1/categories')
local animationCategory = httpService:JSONDecode(categories).AvatarAnimations
local subCategory = game:HttpGet('https://catalog.roblox.com/v1/subcategories')
local emoteCategory = httpService:JSONDecode(subCategory).EmoteAnimations

local emotesTable = {}
local cursor = ''
local animsTable = httpService:JSONDecode(game:HttpGet('https://gist.githubusercontent.com/bobowawahahahbobobwahahawoaowabobwabo/1ac931bd2d4630c9794a6b3a61cfe898/raw/ddc890e5e93808662fd57217fdde5145b531e620/Animations'))

local animsTableNames = {}
for name in pairs(animsTable) do
    table.insert(animsTableNames, name)
end

while true do
    local requestString = ('https://catalog.roblox.com/v1/search/items/details?Category=%s&Subcategory=%s&IncludeNotForSale=true&Limit=30&Cursor=%s'):format(
        animationCategory, emoteCategory, cursor
    )
    local response = httpService:JSONDecode(game:HttpGet(requestString))
    cursor = response.nextPageCursor
    
    for _, data in ipairs(response.data) do
        table.insert(emotesTable, {
            data.name,
            data.id
        })
    end

    if not cursor then
        break
    end
end

table.sort(emotesTable, function(a, b)
    return a[1] < b[1]
end)

table.sort(animsTableNames)

local robloxEmotes = {}
local emoteNames = {}

for _, emote in ipairs(emotesTable) do
    table.insert(emoteNames, emote[1])
    robloxEmotes[emote[1]] = { emote[2] }
end

local library = loadstring(game:HttpGet('https://gist.githubusercontent.com/bobowawahahahbobobwahahawoaowabobwabo/60b3369b5ea7f6b86c139bcda0a95be2/raw/233281331af74a5496428cc2dacf26166a58efb8/shit_libary'))()
local plr = game:GetService('Players').LocalPlayer
local character = plr.Character
local humanoid = character:WaitForChild('Humanoid', 5) or character:FindFirstChildWhichIsA('Humanoid')
local currentEmotes = {}
local selectedEmotes = currentEmotes

if not humanoid then
    return
end

local function updateCurrentEmotes()
    local description = humanoid.HumanoidDescription
    local emotes = description:GetEquippedEmotes()
    
    currentEmotes = {}
    selectedEmotes = {}
    
    for _, data in ipairs(emotes) do
        table.insert(currentEmotes, data.Name)
    end
    
    humanoid.HumanoidDescription:SetEmotes(robloxEmotes)
    
    local existsSave, saveConfig = pcall(readfile, 'animations-config.json')

    if existsSave then
        saveConfig = httpService:JSONDecode(saveConfig)
        currentEmotes = saveConfig
        selectedEmotes = saveConfig
    else
        selectedEmotes = currentEmotes
    end
end

local function updateAnimations()
    local animation = animsTable[library.flags.anim]
    local animate = character:WaitForChild('Animate', 5) or character:FindFirstChild('Animate', true)

    if not animate then return end

    local swimIdle = false

    for anim, data in pairs(animation) do
        for idx, id in ipairs(data) do
            local obj = animate:WaitForChild(anim, 5)
            if not obj then return end
            if anim == 'idle' then
                obj:WaitForChild('Animation' .. idx).AnimationId = id
            elseif anim == 'swim' then
                if not swimIdle then
                    obj:WaitForChild('Swim').AnimationId = id
                    swimIdle = true
                else
                    animate:WaitForChild('swimidle').SwimIdle.AnimationId = id
                end
            else
                local parsed = anim:gsub('^.', anim.upper)
                obj:WaitForChild(parsed .. 'Anim').AnimationId = id
            end
        end
    end
end

pcall(updateCurrentEmotes)

plr.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = newCharacter:WaitForChild('Humanoid', 5) or newCharacter:FindFirstChildWhichIsA('Humanoid')
    
    humanoid.HumanoidDescription:SetEmotes(robloxEmotes)
    humanoid.HumanoidDescription:SetEquippedEmotes(selectedEmotes)
    
    pcall(updateAnimations)
end)

local window = library:CreateWindow('Roblox Emotes') do
    local emotes = window:AddFolder('Emotes') do
        for number = 1, 8 do
            emotes:AddList({
                text = ('Emote %s'):format(number),
                flag = ('emote%s'):format(number),
                value = currentEmotes[number],
                values = emoteNames,
                callback = function(selectedEmote)
                    selectedEmotes[number] = selectedEmote
                end
            })
        end
        emotes:AddButton({
            text = 'Apply Emotes',
            flag = 'emote',
            callback = function()
                humanoid.HumanoidDescription:SetEquippedEmotes(selectedEmotes)
            end
        })
    end
    local animations = window:AddFolder('Animations') do
        local defaultValue = 'Mocap' do
            local animate = character:WaitForChild('Animate', 5) or character:FindFirstChild('Animate', true)
			if not animate then return end
            local walkAnim = animate:FindFirstChild('WalkAnim', true)
            
            if walkAnim then
                local assetInfo = game:GetService('MarketplaceService'):GetProductInfo(walkAnim.AnimationId:match('%d+'))
                defaultValue = assetInfo.Name:split(' ')[1]
            end
        end
        
        animations:AddList({
            text = 'Character Animation',
            flag = 'anim',
            value = 'Mocap',
            values = animsTableNames
        })
        animations:AddButton({
            text = 'Apply Animation',
            flag = 'animapply',
            callback = function()
                pcall(updateAnimations)
            end
        })
    end
    
    local saving = window:AddFolder('Saving') do
        saving:AddButton({
            text = 'Save Config',
            flag = 'configbtn',
            callback = function()
                local saveConfig = httpService:JSONEncode(selectedEmotes)
                writefile('animations-config.json', saveConfig)
            end
        })
    end
end

library:Init()
